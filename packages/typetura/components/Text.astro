---
export interface TextProps{
	/** Apply as Big Text */
	big?:boolean
	/** Apply as Small Text */
	small?:boolean
	/** Disable Typetura */
	none?: Boolean;
		/** Adjust the Scale for this Headline */
	scale?:number
		/** Adjust the Base Size for this Headline */
	base?:number
	/** Adjust the Font Timing for this Headline */
	ease?: CSSStyleDeclaration['animationTimingFunction']

}
const handleError = (msg: string) =>{throw new Error(msg)};

const {big, small, scale, base, ease, none,...attrs} = Astro.props as TextProps

const Text = 'p'

let classes = Object.keys(attrs).find((item) => /^class$/i.test(item));
let additionalClassList = [];
if (classes) {
	//@ts-ignore
	let classList = attrs['class'];
	//@ts-ignore
	delete attrs['class'];
	classList = typeof classList === 'string' ? classList.split(' ') : handleError('Incorrect values passed');
	additionalClassList = classList;
}

const manageStyling = () => {
	return `<style>${
		Boolean(big) && !Boolean(small) ? `.big` :
		Boolean(small) && !Boolean(big) ? `.small` : `.big`
	}{${Boolean(none) ? `--tt-key:none;`:''}${Boolean(base) ? `--tt-base:${base};`  :''}${Boolean(ease) ? `--tt-ease:${ease};`  : ''}${Boolean(scale)? `--tt-scale:${scale};`:''}}</style>`;
};
---
{
	(Boolean(base) || Boolean(scale) || Boolean(ease) || Boolean(none) ) &&
	<Fragment set:html={manageStyling()}/> 
}
<Text
	class:list={[
		{
			'big': (Boolean(big) && !Boolean(small))&& true,
			'small': (Boolean(small) && !Boolean(big)) && true, 
		},
		additionalClassList
	]}
	{...attrs}
>
	<slot/>
</Text>
