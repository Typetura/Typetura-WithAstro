---
import Packages from './Packages.astro'
import type {Packs} from '../types'

export interface Props {
	/** Set Base Value for Fonts */
	base?: number;
	/** Set Scale Value */
	scale?: number;
	/** Use JS to Apply overrides */
	js?: boolean;
	/** Apply additional Selectors */
	selectors?: string | string[];
	/** Use Typetura's Custom Font Packs */
	pack?: Packs 
}

let { base = 20, scale = 1, js, selectors, pack } = Astro.props as Props;

let overrides: string[];
if (selectors && !js) {
	throw Error(" prop.js needs to be appended to the `<Typetura/>` component inorder to adjust Typetura's default selectors");
}
if (selectors) {
	if (typeof selectors === 'string') {
		overrides = selectors.includes(',') ? selectors.split(',') : [selectors];
	}
	if (Array.isArray(selectors)) {
		overrides =[...selectors];
	}
}

const renderLink = `<script src="https://cdn.jsdelivr.net/gh/scottkellum/typetura.js@master/js/typetura.min.js"></script>`

const renderStatement = () => {
	if (js && overrides) {

		return `<script> 
/** Typetura Settings */
window.typetura={ 
		base: ${base} ,
		scale: ${scale},
		selectors:[${overrides.reduce((prev,curr)=>([...prev,`'${curr}'`]),'')}]}
</script>`;
	}
	if (js) {
		return `<script>
/** Typetura Settings */
window.typetura={
	base: ${base},
	scale: ${scale}
}
</script>`;
	}
	return `
		<style>
		/* Typetura Settings */
		:root{
			--tt-base:${base};
			--tt-scale:${scale};
		}
		</style>`;
	
};
---
{ Boolean(pack)
  ?
	<Packages pkg={pack}/>
	:
	<Fragment set:html={renderLink} />
}
{
	<Fragment set:html={renderStatement()}/>
}
