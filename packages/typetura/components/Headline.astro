---
export interface HeadlineProps {
	/** Apply as SubHeadline  */
	sub?: Boolean;
	/** Disable Typetura */
	none?: Boolean;
	/** Set the Level of Heading Between H1-H3*/
	level?: string | number;
	/** Adjust the Scale for this Headline */
	scale?: number;
	/** Adjust the Base Size for this Headline */
	base?: number;
	/** Adjust the Font Timing for this Headline */
	ease?: CSSStyleDeclaration['animationTimingFunction'];
	
}
const handleError = (msg: string) => new Error(msg);

let { level, sub, scale, base, ease, none, ...attrs } = Astro.props as HeadlineProps;

let Heading: string = 'h1';

if (typeof level === 'string') {
	level = level.startsWith('h') ? +level.substring(1) : +level;
}
//@ts-ignore
if (level >= 1 && level <= 3) {
	Heading = `h${level}`;
} else {
	handleError(`Level: ${level} is out of Range, h1-> h3`);
}

let classes = Object.keys(attrs).find((item) => /^class$/i.test(item));
let additionalClassList = [];
if (classes) {
	let classList = attrs['class'];
	delete attrs['class'];
	classList = typeof classList === 'string' ? classList.split(' ') : handleError('Incorrect values passed');
	additionalClassList = classList;
}



const manageStyling = () => {
	return `<style>${
		Boolean(sub) ? `.primary-subheadline` : `.primary-headline`
	}{${Boolean(none) ? `--tt-key:none;`:''}${Boolean(base) ? `--tt-base:${base};`  :''}${Boolean(ease) ? `--tt-ease:${ease};`  : ''}${Boolean(scale)? `--tt-scale:${scale};`:''}}</style>`;
};

---
{
	(Boolean(base) || Boolean(scale) || Boolean(ease) || Boolean(none) ) &&
	<Fragment set:html={manageStyling()}/> 
}
<Heading
	class:list={[
		{
			'primary-headline': !Boolean(sub) && true,
			'primary-subheadline': Boolean(sub) && true,
		},
		additionalClassList,
	]}
	{...attrs}
>
	<slot />
</Heading>

