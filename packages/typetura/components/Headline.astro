---
import { handleError,getClassesFromAttrs, ManageStyles} from '../utils/utils';
export interface HeadlineProps {
	/** Set the Level of Heading Between H1-H3*/
	level?: string | number;
	/** Apply as SubHeadline  */
	sub?: boolean;
	/** Disable Typetura */
	none?: boolean;
	/** Apply a new Animatiton Key */
	key?:string
	/** Adjust the Scale for this Headline */
	scale?: number;
	/** Adjust the Base Size for this Headline */
	base?: number;
	/** Adjust the Font Timing for this Headline */
	ease?: CSSStyleDeclaration['animationTimingFunction'];
	
}


let { level=1, sub, scale, base, ease, none, key, ...attrs } = Astro.props as HeadlineProps;

let Heading: string = 'h1';

if (typeof level === 'string') {
	level = level.startsWith('h') ? +level.substring(1) : +level;
}
//@ts-ignore
if (level >= 1 && level <= 3) {
	Heading = `h${level}`;
} else {
	handleError(`Level: ${level} is out of Range, h1-> h3`);
}

const {classlist} = getClassesFromAttrs(attrs)

---
{
	(Boolean(base) || Boolean(scale) || Boolean(ease) || Boolean(none) || Boolean(key)) &&
	<Fragment set:html={ManageStyles(
		(Boolean(sub)
		?'primary-subheadline'
		: 'primary-headline'
		),key,none,base,scale,ease)}/> 
}
<Heading
	class:list={[
		{
			'primary-headline': !Boolean(sub) && true,
			'primary-subheadline': Boolean(sub) && true,
		},
		classlist,
	]}
	{...attrs}
>
	<slot />
</Heading>

