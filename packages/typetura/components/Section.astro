---
	import { handleError,getClassesFromAttrs, ManageStyles} from '../utils/utils';
export interface SectionProps {
	/** Set the Level of Heading Between H2-H5 */
	level?: string | number;
	/** Apply as SubHeadline  */
	sub?: boolean;
	/** Apply as a Label */
	label?: boolean;
	/** Apply a new Animatiton Key */
	key?:string
	/** Disable Typetura */
	none?: boolean;
	/** Adjust the Scale for this Headline */
	scale?: number;
	/** Adjust the Base Size for this Headline */
	base?: number;
	/** Adjust the Font Timing for this Headline */
	ease?: CSSStyleDeclaration['animationTimingFunction'];
}


let { level=2, sub, label, scale, base, ease, none, key, ...attrs } = Astro.props as SectionProps;

let Section: string = 'h2';

if (typeof level === 'string' ) {
	level = +level;
}
//@ts-ignore
if (level >= 2 && level <= 5) {
	Section = `h${level}`;
} else {
	handleError(`Level: ${level} is out of Range:\n\t Accepted Heading range is h2-> h5`,'Section');
}

const {classlist} = getClassesFromAttrs(attrs)

const chooseClass = () => {
	if(Boolean(sub) && !Boolean(label)){
		return 'section-subheadline'
	}
	if(!Boolean(sub) && Boolean(label)){
		return 'section-label'
	}
	if(!Boolean(sub) && !Boolean(label)){
		return 'section-headline'
	}
	return 'section-headline'
}
---
{
	(Boolean(base) || Boolean(scale) || Boolean(ease) || Boolean(none) || Boolean(key)) &&
	<Fragment set:html={ManageStyles(chooseClass(),key,none,base,scale,ease)}/> 
}
<Section
	class:list={[
		chooseClass(),
		classlist,
	]}
	{...attrs}
>
	<slot />
</Section>

