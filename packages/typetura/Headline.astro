---
const handleError = (msg: string) => new Error(msg);

interface HeadlineProps {
	/** Apply as SubHeadline  */
	sub?: Boolean;
	/** Apply as a Section */
	section?: Boolean;
	/** Apply as a Label */
	label?: Boolean;
	/** Disable Typetura */
	none?: Boolean;

	/** Set the Level of Heading */
	level?: string | number;
	/** Adjust the Scale for this Headline */
	scale?: number;
	/** Adjust the Base Size for this Headline */
	base?: number;
	/** Adjust the Font Timing for this Headline */
	ease?: CSSStyleDeclaration['animationTimingFunction'];
}

let { level, sub, section, label, scale, base, ease, none, ...attrs } = Astro.props as HeadlineProps;

let Heading: string = 'h1';

if (typeof level === 'string') {
	level = +level;
}
if (level >= 1 && level <= 4) {
	Heading = `h${level}`;
} else {
	handleError(`Level: ${level} is out of Range, h1-> h4`);
}

let classes = Object.keys(attrs).find((item) => /^class$/i.test(item));
let additionalClassList = [];
if (classes) {
	let classList = attrs['class'];
	delete attrs['class'];
	classList = typeof classList === 'string' ? classList.split(' ') : handleError('Incorrect values passed');
	additionalClassList = classList;
}

let pHead:Boolean,
	pSub:Boolean,
	sHead:Boolean,
	sSub:Boolean,
	sLabel:Boolean;
	pHead=pSub=sHead=sSub=sLabel=false

if (!Boolean(sub) && !Boolean(section) && !Boolean(label)) pHead = true;
if (Boolean(sub) && !Boolean(section) && !Boolean(label)) pSub = true;
if (Boolean(section) && !Boolean(sub) && !Boolean(label)) sHead = true;
if (Boolean(sub) && Boolean(section) && !Boolean(label)) sSub = true;
if ((Boolean(section) && Boolean(label)) || Boolean(label)) sLabel = true;

const manageStyling = () => {
	return `<style>${
		Boolean(pHead)? `.primary-headline` :
		Boolean(pSub) ? `.primary-subheadline` :
		Boolean(sHead)? `.section-headline` :
		Boolean(sSub) ? `.section-subheadline`:
		Boolean(sLabel) ? `.section-label`: ``
	}{${Boolean(none) ? `--tt-key:none;`:''}${Boolean(base) ? `--tt-base:${base};`  :''}${Boolean(ease) ? `--tt-ease:${ease};`  : ''}${Boolean(scale)? `--tt-scale:${scale};`:''}}</style>`;
};

---
{
	(Boolean(base) || Boolean(scale) || Boolean(ease) || Boolean(none) ) &&
	<Fragment set:html={manageStyling()}/> 
}
<Heading
	class:list={[
		{
			'primary-headline': Boolean(pHead) && true,
			'primary-subheadline': Boolean(pSub) && true,
			'section-headline': Boolean(sHead) && true,
			'section-subheadline': Boolean(sSub) && true,
			'section-label': Boolean(sLabel) && true,
		},
		additionalClassList,
	]}
	{...attrs}
>
	<slot />
</Heading>

