---
import { Packs } from '../types';
import { handleError } from '../utils/utils';


export interface Props {
	pkg: Packs;
}

const { pkg } = Astro.props as Props;

if (pkg.split(',').length > 1) {
	handleError(`You can only pass through one Typetura Package at a time. Typetura can only hold one Package on a Page at any one time.`, 'Packages');
}

/**
 * PUBLIC_TYPETURA_KEY  = Public API key
 * Obtained from process.env from build host
 * Else use `.env` to obtain Key
 */
const API_KEY = process.env.PUBLIC_TYPETURA_KEY || import.meta.env.PUBLIC_TYPETURA_KEY;
let checkAPI, output;

const render = async () => `
<!--  ${pkg} Font System provided by Typetura -->
<script src="https://cdn.typetura.com/typetura.js?apiKey=${API_KEY}"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.typetura.com/${pkg.replaceAll(' ', '-').toLowerCase()}/typetura.css?apiKey=${API_KEY}"/>
<!-- END: Typetura Typography -->`;

if (!API_KEY) {
	handleError(`
	Sorry there is no Typetura API key found within the project's '.env',
	If you are in possesion of an API key please set it to:
	'PUBLIC_TYPETURA_KEY=XXXXXXX-XXXXXXX-XXXXXXX-XXXXXXX'
	To signup for an official Typetura Font system visit:
	https://typetura.com/packages
	If you have any issues with your API key please contact:
	ðŸ“§support@typetura.com
	`,'Packages');
} else {
	checkAPI = await fetch(`https://cdn.typetura.com/typetura.js?apiKey=${API_KEY}`).then((res) => (res.status === 200 ? true : false));
}

if (!checkAPI) {
	handleError(
		`
	An Invalid API-Key has been Detected 
	Please check the validity of the key provided.
	
	If you are experincing any problems with your API key, dont hesitate to contact us directly:\n ðŸ“§support@typetura.com`,
		'Packages'
	);
} else {
	output = await render();
}
---

<Fragment set:html={output} />
